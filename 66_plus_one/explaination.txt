This C++ code defines a solution for a common problem: incrementing an integer represented as an array of its digits by one. Here’s a step-by-step breakdown of how it works:

### Problem Context
Imagine you have a number represented as a list of digits. For example, the number `123` would be represented as `[1, 2, 3]`. You want to increment this number by one. In the example, adding one would yield `124`, represented as `[1, 2, 4]`. However, if the number ends in `9`, such as `129` (`[1, 2, 9]`), adding one will cause the last digit to become `0` and carry over, resulting in `[1, 3, 0]`. If all digits are `9` (e.g., `[9, 9, 9]`), the resulting number will need an additional digit, producing `[1, 0, 0, 0]`.

### Code Explanation

```cpp
class Solution {
public:
    vector<int> plusOne(vector<int>& digits) {
```
The function `plusOne` takes a `vector<int>& digits` as input, representing the integer's digits in an array format. It returns a `vector<int>` after incrementing the integer by one.

```cpp
        int n = digits.size();
```
- `n` stores the size of the `digits` vector (i.e., the number of digits in the input number).

```cpp
        for (int i = n - 1; i >= 0; i--) {
```
- A `for` loop iterates over the digits starting from the last index (`n - 1`) and moving toward the first index (`0`).
- This reverse traversal allows us to handle the addition from the least significant digit (rightmost) to the most significant digit (leftmost), similar to manual addition.

```cpp
            if (digits[i] < 9) {
                digits[i]++;
                return digits;
            }
```
- If the current digit is less than `9`, we can simply increment it by one and return the updated vector `digits`, as there’s no need to carry over.
    - For example, if `digits` is `[1, 2, 3]`, `digits[2]` is `3`. Incrementing it to `4` gives `[1, 2, 4]`, so the function returns this result.

```cpp
            digits[i] = 0;
```
- If the current digit is `9`, we set it to `0` and continue the loop to add one to the next digit to the left.
    - For example, if `digits` is `[1, 2, 9]`, after setting `digits[2] = 0`, we get `[1, 2, 0]` and proceed to increment `digits[1]`.

### Handling All `9`s Case

```cpp
        digits.insert(digits.begin(), 1);
```
- If the loop completes without returning, this means every digit was `9` (e.g., `[9, 9, 9]`). All have been set to `0`, resulting in `[0, 0, 0]`.
- To represent the correct result, we need to add `1` at the start of the vector, making it `[1, 0, 0, 0]`.

### Final Return
```cpp
        return digits;
    }
};
```
- After the insertion, the function returns the updated vector `digits`, which now correctly represents the incremented integer.

### Example Walkthrough

1. **Example 1: `[1, 2, 3]`**
   - Starting from the last digit, `3` is less than `9`, so increment it to `4`.
   - Result: `[1, 2, 4]`.

2. **Example 2: `[1, 2, 9]`**
   - `9` is at the last position. Set it to `0` and move to the next left digit, `2`.
   - Increment `2` to `3`.
   - Result: `[1, 3, 0]`.

3. **Example 3: `[9, 9, 9]`**
   - Each digit is `9`, so they’re all set to `0`.
   - Insert `1` at the beginning.
   - Result: `[1, 0, 0, 0]`.

### Summary
- The code effectively increments the integer represented by `digits`, handling the carry correctly, even when multiple `9`s are involved.
- This approach is efficient, with a time complexity of \(O(n)\) since each digit is processed once.
